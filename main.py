import asyncio
import random

from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, FSInputFile

from choice import main_menu, main_choice, gun_choice, object_choice
from gameLogic import intelect, continuation
from fill import fill_bullets
from killTrue import killT
from killFalse import killF

bot = Bot(token="6702446643:AAFMyBrlTyFZb4GD0ArTCgTQm-aGqNKH77E")
dp = Dispatcher()

bullets = []
objects = []
play_live = 5
opponent_live = 5
kol = 0
kol_objects = 0
sum = 0
size = 0
damage = 1
skotch = False
duplet = False

class MyCallback(CallbackData, prefix="my"):
    foo: str

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    global bullets, play_live, opponent_live, kol, kol_objects, sum, size, objects, damage
    bullets = []
    objects = []
    play_live = 5
    opponent_live = 5
    kol = 0
    kol_objects = 0
    sum = 0
    size = 0
    damage = 1
    skotch = False
    duplet = False
    photo_input = FSInputFile('./pictures/hello.png', 'rb')
    await bot.send_photo(message.chat.id, photo_input, caption=f"–û—Å–º–µ–ª–∏—à—å—Å—è –ª–∏ —Ç—ã —Å—ã–≥—Ä–∞—Ç—å –≤ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—É—é —Ä—É–ª–µ—Ç–∫—É? ‚ò†Ô∏è" + "\n" + "–°–∞–¥–∏—Å—å –∑–∞ —Å—Ç–æ–ª, –∏ –ø—É—Å—Ç—å –ø–æ–≤–µ–∑—ë—Ç —Å–∏–ª—å–Ω–µ–π—à–µ–º—É! üí™", reply_markup=main_menu())


@dp.callback_query(MyCallback.filter(F.foo == "play"))
async def my_callback_foo(querty: CallbackQuery):
    try:
        await querty.message.delete()
    except:
        print(querty)
    global sum, size, kol_objects, bullets, play_live, kol, opponent_live, damage
    print(kol_objects, sum, play_live, opponent_live, kol)
    if len(bullets) == 0:
        bullets, kol_objects, sum, play_live, opponent_live, kol = await fill_bullets(bot, querty, bullets, kol_objects, sum, play_live, opponent_live, kol)
    print(*bullets)
    str_object = ""
    if len(objects) == 0:
        str_object = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    else:
        for i in range(0,len(objects)-1):
            str_object = str_object + objects[i] + ", "
        str_object = str_object + objects[len(objects)-1]
        #print(str_object)
    photo_input = FSInputFile('./pictures/main menu.png', 'rb')
    await bot.send_photo(querty.message.chat.id, photo_input, caption=f"–°–µ–π—á–∞—Å —Ç–≤–æ–π —Ö–æ–¥! –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø—Ä–∏–¥—É–º–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é" + "\n" + "–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: " + str(play_live) + "\n" + "–ó–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: " + str(opponent_live) + "\n" + "–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã: " + str_object + "\n" + "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã—Ç–∞—â–∏—Ç—å –µ—â—ë " + str(kol_objects) + " –ø—Ä–µ–¥–º–µ—Ç–æ–≤", reply_markup=main_choice(kol, kol_objects))

@dp.callback_query(MyCallback.filter(F.foo == "gun"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    photo_input = FSInputFile('./pictures/seriousChoice.png', 'rb')
    await bot.send_photo(querty.message.chat.id, photo_input, caption=f"–°–¥–µ–ª–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. –í –∫–æ–≥–æ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—Å—Ç—Ä–µ–ª?", reply_markup=gun_choice())

@dp.callback_query(MyCallback.filter(F.foo == "give"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global objects, kol_objects, kol
    baf = random.randint(0,11)
    #baf = 0
    kol_objects = kol_objects - 1
    kol = kol + 1
    if baf == 0:
        objects.append("–±–∏–Ω—Ç")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ –±–∏–Ω—Ç. –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 1 HP", reply_markup=continuation())
    elif baf == 1:
        objects.append("–∞–ø—Ç–µ—á–∫–∞")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ –∞–ø—Ç–µ—á–∫—É. –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 2 HP", reply_markup=continuation())
    elif baf == 2:
        objects.append("–æ–±—Ä–µ–∑")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ –æ–±—Ä–µ–∑. –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏—Ç—å —É—Ä–æ–Ω –æ—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞ –≤ 2 —Ä–∞–∑–∞", reply_markup=continuation())
    elif baf == 3:
        objects.append("–∫–ª–µ—â–∏")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ –∫–ª–µ—â–∏. –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Ç–∞—â–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø—É–ª—é –∏–∑ –∫–∞—Ä–∞–±–∏–Ω–∞", reply_markup=continuation())
    elif baf == 4:
        objects.append("–ª—É–ø–∞")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ –ª—É–ø—É. –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–≥–ª—è–¥–µ—Ç—å —Ç–∏–ø —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ç—Ä–æ–Ω–∞", reply_markup=continuation())
    elif baf == 5:
        objects.append("—Å–∫–æ—Ç—á")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ —Å–∫–æ—Ç—á. –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç—É —Ä—É–∫–∏ –∏ –ø–æ—Ö–æ–¥–∏—Ç—å –¥–≤–∞–∂–¥—ã", reply_markup=continuation())
    elif baf == 6:
        objects.append("–¥—É–ø–ª–µ—Ç")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ –¥—É–ø–ª–µ—Ç. –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –¥–≤—É–º—è –ø—É–ª—è–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ", reply_markup=continuation())
    elif baf == 7:
        objects.append("–ø—É–ª–µ–≤–æ—Ä–æ—Ç")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ –ø—É–ª–µ–≤–æ—Ä–æ—Ç. –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–µ–Ω—è—Ç—å —Ç–∏–ø —Å–ª–µ–¥—É—é—â–µ–π –ø—É–ª–∏ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π", reply_markup=continuation())
    elif baf == 8:
        objects.append("—à–∞–≤–µ—Ä–º–∞")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ —à–∞–≤–µ—Ä–º—É. –°–≤–µ–∂–∞—è —à–∞–≤–µ—Ä–º–∞ –≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç 2 HP, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —É–º–µ–Ω—å—à–∏—Ç –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 1 HP. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —à–∞–≤–µ—Ä–º–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è 50%", reply_markup=continuation())
    elif baf == 9:
        objects.append("–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ. –£ –≤–∞—Å –µ—Å—Ç—å —à–∞–Ω—Å 50% –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 1 HP. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ 2 HP", reply_markup=continuation())
    elif baf == 10:
        objects.append("–ª–µ–∑–≤–∏—è")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ –ª–µ–∑–≤–∏—è. –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å 1 HP –∑–¥–æ—Ä–æ–≤—å—è, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —É—Ä–æ–Ω –≤ 3 —Ä–∞–∑–∞", reply_markup=continuation())
    else:
        objects.append("–∫–∞—Ä—Ç–æ—á–∫–∞")
        await querty.message.answer(f"–í—ã –¥–æ—Å—Ç–∞–ª–∏ –º–∞–≥–Ω–∏—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É. –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–∂–µ–Ω–Ω—ã—Ö –∏ —Ö–æ–ª–æ—Å—Ç—ã—Ö –ø–∞—Ç—Ä–æ–Ω–æ–≤", reply_markup=continuation())
@dp.callback_query(MyCallback.filter(F.foo == "use"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, objects
    photo_input = FSInputFile('./pictures/objects.png', 'rb')
    await bot.send_photo(querty.message.chat.id, photo_input, caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", reply_markup=object_choice(objects))
@dp.callback_query(MyCallback.filter(F.foo == "–±–∏–Ω—Ç"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, objects
    play_live = play_live + 1
    kol = kol - 1
    objects.remove("–±–∏–Ω—Ç")
    await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–∏–Ω—Ç. –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 1 HP:", reply_markup=continuation())
@dp.callback_query(MyCallback.filter(F.foo == "–∞–ø—Ç–µ—á–∫–∞"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, objects
    play_live = play_live + 2
    kol = kol - 1
    objects.remove("–∞–ø—Ç–µ—á–∫–∞")
    await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∞–ø—Ç–µ—á–∫—É. –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 2 HP:", reply_markup=continuation())
@dp.callback_query(MyCallback.filter(F.foo == "–æ–±—Ä–µ–∑"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, objects
    damage = damage + 1
    kol = kol - 1
    print("!damage=" + str(damage))
    objects.remove("–æ–±—Ä–µ–∑")
    await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –æ–±—Ä–µ–∑. –£—Ä–æ–Ω —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É:", reply_markup=continuation())
@dp.callback_query(MyCallback.filter(F.foo == "–∫–ª–µ—â–∏"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, objects
    if bullets[len(bullets)-1] == 0:
        await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–ª–µ—â–∏. –í—ã –≤—ã—Ç–∞—â–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ç—Ä–æ–Ω –∏–∑ —Ä—É–∂—å—è. –ï–≥–æ –≥–∏–ª—å–∑–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—É—Å—Ç–æ–π", reply_markup=continuation())
    else:
        await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–ª–µ—â–∏. –í—ã –≤—ã—Ç–∞—â–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ç—Ä–æ–Ω –∏–∑ —Ä—É–∂—å—è. –ï–≥–æ –≥–∏–ª—å–∑–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –∑–∞—Ä—è–∂–µ–Ω–Ω–æ–π",reply_markup=continuation())
    bullets.pop()
    kol = kol - 1
    objects.remove("–∫–ª–µ—â–∏")
@dp.callback_query(MyCallback.filter(F.foo == "–ª—É–ø–∞"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, objects
    if bullets[len(bullets)-1] == 0:
        await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ª—É–ø—É. –°–ª–µ–¥—É—é—â–∏–π –ø–∞—Ç—Ä–æ–Ω –≤ —Ä—É–∂—å–µ - —Ö–æ–ª–æ—Å—Ç–æ–π", reply_markup=continuation())
    else:
        await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ª—É–ø—É. –°–ª–µ–¥—É—é—â–∏–π –ø–∞—Ç—Ä–æ–Ω –≤ —Ä—É–∂—å–µ - –∑–∞—Ä—è–∂–µ–Ω–Ω—ã–π",reply_markup=continuation())
    kol = kol - 1
    objects.remove("–ª—É–ø–∞")
@dp.callback_query(MyCallback.filter(F.foo == "—Å–∫–æ—Ç—á"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, skotch, duplet, objects
    skotch = True
    await querty.message.answer(f"–†—É–∫–∏ –≤–∞—à–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Å–≤—è–∑–∞–Ω—ã —Å–∫–æ—Ç—á–µ–º. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥", reply_markup=continuation())
    kol = kol - 1
    objects.remove("—Å–∫–æ—Ç—á")
@dp.callback_query(MyCallback.filter(F.foo == "–¥—É–ø–ª–µ—Ç"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, skotch, duplet, objects
    duplet = True
    kol = kol - 1
    objects.remove("–¥—É–ø–ª–µ—Ç")
    await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥—É–ø–ª–µ—Ç. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ä—É–∂—å—ë –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç –¥–≤—É–º—è –ø—É–ª—è–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ", reply_markup=continuation())

@dp.callback_query(MyCallback.filter(F.foo == "–ø—É–ª–µ–≤–æ—Ä–æ—Ç"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, skotch, duplet, objects
    g = bullets.pop()
    if g == 0:
        bullets.append(1)
    else:
        bullets.append(0)
    objects.remove("–ø—É–ª–µ–≤–æ—Ä–æ—Ç")
    kol = kol - 1
    await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—É–ª–µ–≤–æ—Ä–æ—Ç. –¢–∏–ø —Å–ª–µ–¥—É—é—â–µ–π –ø—É–ª–∏ –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π", reply_markup=continuation())

@dp.callback_query(MyCallback.filter(F.foo == "—à–∞–≤–µ—Ä–º–∞"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, skotch, duplet, objects
    r = random.randint(0, 1)
    if r == 1:
        play_live = play_live + 2
        await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —à–∞–≤–µ—Ä–º—É. –í–∞–º –ø–æ–≤–µ–∑–ª–æ: –≤—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 2 –µ–¥–∏–Ω–∏—Ü—ã –∑–¥–æ—Ä–æ–≤—å—è",reply_markup=continuation())
    else:
        play_live = play_live - 1
        await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —à–∞–≤–µ—Ä–º—É. –í–∞–º –Ω–µ–ø–æ–≤–µ–∑–ª–æ: –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 1 –µ–¥–∏–Ω–∏—Ü—É –∑–¥–æ—Ä–æ–≤—å—è", reply_markup=continuation())
    objects.remove("—à–∞–≤–µ—Ä–º–∞")
    kol = kol - 1
@dp.callback_query(MyCallback.filter(F.foo == "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, skotch, duplet, objects
    r = random.randint(0, 1)
    if r == 1:
        play_live = play_live + 1
        await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ. –í–∞–º –ø–æ–≤–µ–∑–ª–æ: –≤—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 1 –µ–¥–∏–Ω–∏—Ü—ã –∑–¥–æ—Ä–æ–≤—å—è",reply_markup=continuation())
    else:
        play_live = play_live - 2
        await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ. –í–∞–º –Ω–µ–ø–æ–≤–µ–∑–ª–æ: –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 2 –µ–¥–∏–Ω–∏—Ü—É –∑–¥–æ—Ä–æ–≤—å—è", reply_markup=continuation())
    objects.remove("–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ")
@dp.callback_query(MyCallback.filter(F.foo == "–ª–µ–∑–≤–∏—è"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, objects
    damage = damage + 3
    play_live = play_live - 1
    print("!damage=" + str(damage))
    objects.remove("–ª–µ–∑–≤–∏—è")
    await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ª–µ–∑–≤–∏–µ. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 1 HP, —É—Ä–æ–Ω —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 2:", reply_markup=continuation())

@dp.callback_query(MyCallback.filter(F.foo == "–∫–∞—Ä—Ç–æ—á–∫–∞"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, objects
    objects.remove("–∫–∞—Ä—Ç–æ—á–∫–∞")
    await querty.message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É. –í—ã —É–∑–Ω–∞–ª–∏, —á—Ç–æ –≤ —Ä—É–∂—å–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è " + str(sum) + " –∑–∞—Ä—è–∂–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ä–æ–Ω–æ–≤ –∏ " + str(len(bullets)-sum) + " —Ö–æ–ª–æ—Å—Ç—ã—Ö", reply_markup=continuation())

@dp.callback_query(MyCallback.filter(F.foo == "kill"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage, duplet, skotch, objects
    if (duplet) & (len(bullets) > 1):
        g1 = bullets.pop()
        g2 = bullets.pop()
        print("gg —á—Ç–æ?" + str(g1) + " " + str(g2))
        damage = g1 + g2
        if damage > 0:
            bullets, kol_objects, sum, play_live, opponent_live, kol, damage, skotch, objects = await killT(bot, querty, bullets, kol_objects, sum, play_live, opponent_live, kol, damage, skotch, objects)
        else:
            bullets, kol_objects, sum, play_live, opponent_live, kol, damage, skotch, objects = await killF(bot, querty, bullets, kol_objects, sum, play_live, opponent_live, kol, damage, skotch, objects)
    else:
        if bullets.pop() == 1:
            bullets, kol_objects, sum, play_live, opponent_live, kol, damage, skotch, objects = await killT(bot, querty, bullets, kol_objects, sum, play_live, opponent_live, kol, damage, skotch, objects)
        else:
            bullets, kol_objects, sum, play_live, opponent_live, kol, damage, skotch, objects = await killF(bot, querty, bullets, kol_objects, sum, play_live, opponent_live, kol, damage, skotch, objects)
@dp.callback_query(MyCallback.filter(F.foo == "himself"))
async def my_callback_foo(querty: CallbackQuery):
    await querty.message.delete()
    global bullets, play_live, opponent_live, kol, kol_objects, sum, damage
    if bullets.pop() == 1:
        photo_input = FSInputFile('./pictures/shot.png', 'rb')
        msg = await bot.send_photo(querty.message.chat.id, photo_input, caption=f"*–ë–∞-–±–∞—Ö* –í—ã –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ —Å–µ–±—è")
        await asyncio.sleep(2)
        await msg.delete()
        play_live = play_live - 1
        sum = sum - 1
        msg = await querty.message.answer(f"–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: " + str(play_live) + "\n" + "–ó–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞: " + str(opponent_live))
        await asyncio.sleep(1)
        await msg.delete()
        if play_live <= 0:
            photo_input = FSInputFile('./pictures/lose.png', 'rb')
            await bot.send_photo(querty.message.chat.id, photo_input, caption=f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
        else:
            msg = await querty.message.answer(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É")
            await asyncio.sleep(1)
            await msg.delete()
            if (len(bullets) == 0):
                bullets, kol_objects, sum, play_live, opponent_live, kol = await fill_bullets(bot, querty, bullets, kol_objects, sum, play_live, opponent_live, kol)
            bullets, kol_objects, sum, play_live, opponent_live, kol, damage = await intelect(bot, querty, bullets, play_live, opponent_live, kol, kol_objects, sum, damage)
    else:
        photo_input = FSInputFile('./pictures/miss.png', 'rb')
        msg = await bot.send_photo(querty.message.chat.id, photo_input, caption=f"*–©–µ–ª—á–æ–∫* –†—É–∂—å—ë –Ω–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–æ")
        await asyncio.sleep(2)
        await msg.delete()
        msg = await querty.message.answer(f"–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: " + str(play_live) + "\n" + "–ó–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞: " + str(opponent_live))
        await asyncio.sleep(1)
        await msg.delete()
        if len(bullets) == 0:
            bullets, kol_objects, sum, play_live, opponent_live, kol = await fill_bullets(bot, querty, bullets, kol_objects, sum, play_live, opponent_live, kol)
        print(*bullets)
        print(*objects)
        str_object = ""
        if len(objects) == 0:
            str_object = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        else:
            for i in range(0, len(objects) - 1):
                str_object = str_object + objects[i] + ", "
            str_object = str_object + objects[len(objects) - 1]
            print(str_object)
        photo_input = FSInputFile('./pictures/main menu.png', 'rb')
        await bot.send_photo(querty.message.chat.id, photo_input, caption=f"–°–µ–π—á–∞—Å —Ç–≤–æ–π —Ö–æ–¥! –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø—Ä–∏–¥—É–º–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é" + "\n" + "–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: " + str(play_live) + "\n" + "–ó–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: " + str(opponent_live) + "\n" + "–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã: " + str_object + "\n" + "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã—Ç–∞—â–∏—Ç—å –µ—â—ë " + str(kol_objects) + " –ø—Ä–µ–¥–º–µ—Ç–æ–≤", reply_markup=main_choice(kol, kol_objects))
async def main():
    await bot.delete_webhook()
    await dp.start_polling(bot)
asyncio.run(main())